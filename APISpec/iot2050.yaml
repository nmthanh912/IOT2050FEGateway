openapi: 3.0.0
info:
  title: TickFund API Gateway
  description: A scalable and re-use service
  version: 1.0.0

servers:
  - url: http://<IOT's IP Address>:4000
    description: API Gateway

tags:
  - name: device
    description: API for device
  - name: gateway
    description: API for gateway
  - name: tag
    description: API for tag

paths:
  # DEVICE
  /devices:
    get: 
      summary: Get list of devices
      tags:
        - device
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
        404:
          description: Not Found
        500:
          description: Query Fail
    post:
      summary: Create one or many devices (with config & tags)
      tags:
        - device
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeviceRequestBody"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  keyList:
                    type: array
                    items:
                      type: string
                      example: 897f0f67
        404:
          description: Not Found
        500:
          description: Query Fail
  
  /devices/configs?id={id}&protocol={protocolName}:
    get:
      tags:
        - device
      summary: Get detail configurations of a device
      parameters:
        - in: query
          name: id
          schema:
            type: string
            example: 494e92fc
        - in: query
          name: protocol
          schema:
            $ref: "#/components/schemas/Protocol"
          example:  MODBUSTCP
      responses:
        200:
          description: Return config base on device's protocol
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: "#/components/schemas/ModbusTCPDeviceConfig"
                  - $ref: "#/components/schemas/ModbusRTUDeviceConfig"
                  - $ref: "#/components/schemas/OPCUADeviceConfig"
        404:
          description: Not Found
        500:
          description: Query Fail

  /devices?id={id}:
    put:
      description: Can be partial update (only modify device info & config) or fully update (modify tags via upload)
      tags:
        - device
      parameters:
        - in: path
          name: id
          schema: 
            type: string
          example: 494e92fc
          required: true
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceRequestBody"

      responses:
        200:
          description: Update successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key: 
                    type: string
                    description: Updated device's ID
                    example: 494e92fc
    delete:
      tags:
        - device
      summary: Delete a service by ID
      parameters:
      - in: query
        name: id
        schema:
          type: string
          example: 494e92fc
      responses:
        200:
          description: Delete successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key: 
                    type: string
                    description: Deleted device's ID
                    example: 494e92fc

  /gateways:
    post:
      tags:
        - gateway
      summary: Create a new gateway
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Gateway"
      responses:
        200:
          description: Return new Gateway ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    example: 494e92fc
    get:
      tags:
        - gateway
      summary: Get list of gateways
      responses:
        200:
          description: Return list of gateways
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    ID: 
                      type: string
                      example: 343a4csd
                    data:
                      $ref: "#/components/schemas/Gateway"
    put:
      tags:
        - gateway
      summary: Update gateway by ID
      requestBody:
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Gateway"
      responses:
        200:
          description: Update successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    description: Updated gateway's ID
                    example: 346a2xca

  /gateways?id={id}:
    delete:
      tags:
        - gateway
      summary: Delete a gateway by ID
      parameters:
        - in: query
          name: id
          schema:
            type: string
            example: 343a4csd
      responses:
        200:
          description: Return deleted gateway ID's
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    example: 343a4csd

  /gateways/subscribes?gatewayId={gatewayId}:
    get:
      description: Get all subscribed devices
      tags:
        - gateway
      parameters:
        - in: query
          schema:
            type: string
          name: gatewayId
          description: Gateway's ID
          example: 343acbd
      responses:
        200:
          description: Return gateway's list of subscribed devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscribedDeviceInfo"
  
  /gateways/subscribes:
    post:
      tags:
        - gateway
      summary: Subcribe multiple devices for a gateway
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gatewayId:
                  type: string
                  example: 4asd59qw
                deviceIdList:
                  type: array
                  items:
                    type: string
                    example: 658zxca5qw
      responses:
        200:
          description: Return message OKE
    delete:
      tags:
        - gateway
      summary: Unsubscribe a device in a gateway
      parameters:
        - in: query
          name: gatewayId
          schema:
            type: string
            example: h123ozu43
        - in: query
          name: deviceId
          schema:
            type: string
            example: sdj124fsw
      responses:
        200:
          description: Return message OKE
  /gateways/subscribes/config:
    get:
      tags:
        - gateway
      summary: Get tag configs of a device, which is subscribed by a specific gateway
      parameters:
        - in: query
          name: gatewayId
          schema:
            type: string
          example: 343a4csd
        - in: query
          name: deviceId
          schema:
            type: string
          example: 343a4csd
      responses:
        200:
          description: Return OK
    
    put:
      tags:
        - gateway
      summary: Get tag configs of a device, which is subscribed by a specific gateway
      parameters:
        - in: query
          name: gatewayId
          schema:
            type: string
          example: 343a4csd
        - in: query
          name: deviceId
          schema:
            type: string
          example: 343a4csd
      responses:
        200:
          description: Return OK

  # TAGS
  /devices/{id}/tags?protocol={protocol}:
    post:
      tags:
        - tag
      summary: Create new a tag
      parameters:
        - in: path
          name: id
          description: Device ID
          schema:
            type: string
            example: 13asd56
          required: true
        - in: query
          name: protocol
          schema:
            $ref: "#/components/schemas/Protocol"
            
      requestBody:
        content:
          application/json:
            schema: 
              oneOf:
                - $ref: "#/components/schemas/ModbusTCPOrRTUTag"
                - $ref: "#/components/schemas/OPCUATag"
      responses:
        200:
          description: Return message OKE
    get:
      tags:
        - tag
      summary: Get all tags of a device
      parameters:
        - in: path
          name: id
          description: Device ID
          schema:
            type: string
            example: 13asd56
          required: true
        - in: query
          name: protocol
          schema:
            $ref: "#/components/schemas/Protocol"
      responses:
        200:
          description: Return tag list of a device
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/ModbusTCPOrRTUTag"
                  - type: array
                    items:
                      $ref: "#/components/schemas/OPCUATag"
  
  /devices/{id}/tags?protocol={protocol}&tagName={tagName}&attrName={attrName}:
    put:
      tags:
        - tag
      summary: Edit a tag
      parameters:
        - in: path
          name: id
          description: Device ID
          schema:
            type: string
            example: 13asd56
          required: true
        - in: query
          name: protocol
          schema:
            $ref: "#/components/schemas/Protocol"
        - in: query
          name: tagName
          schema:
            type: string
            example: test_50
        - in: query
          name: attr
          description: Attribute of a tag which is modified
          schema:
            type: string
            example: address
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newValue:
                  oneOf:
                    - type: string
                    - type: integer
                  example: 15
      responses:
        200:
          description: Return message OKE
  /devices/{id}/tags?tagName={tagName}:
    delete:
      tags:
        - tag
      summary: Delete a tag
      parameters:
        - in: path
          name: id
          description: Device ID
          schema:
            type: string
            example: 13asd56
          required: true
        - in: query
          name: tagName
          schema:
            type: string
            example: tag_15
      responses:
        200:
          description: Return message OKE

                    




components:
  schemas:
    SubscribedDeviceInfo:
      type: object
      properties:
        ID:
          type: string
          example: 494e92fc
        name:
          type: string
          example: TEST_TCP
        protocol:
          $ref: "#/components/schemas/Protocol"
    Gateway:
      type: object
      properties:
        name:
          type: string
          example: 'MQTT_TEST'
        description:
          type: string
          example: ''
        protocol:
          $ref: "#/components/schemas/Protocol"
        config:
          type: object
          properties:
            IP:
              type: string
              example: 192.168.10.11
            port:
              type: integer
              example: 3000
            username:
              type: string
              example: 'phucvinh'
            password:
              type: string
              example: abcdefghjkl
            QoS:
              type: integer
              enum: [0, 1, 2]

    ModbusTCPDeviceConfig:
      type: object
      properties:
        IP:
          type: string
          example: 127.0.0.1
        port:
          type: integer
          example: 8000
        slaveID:
          type: number
          minimum: 1
          maximum: 247
          example: 1
    
    ModbusRTUDeviceConfig:
      type: object
      properties:
        com_port_num:
          type: string
          example: COM1
        parity:
          type: string
          enum:
            - none
            - odd
            - even
        slaveID:
          type: integer
          minimum: 0
          maximum: 247
          example: 1
        baudrate:
          type: integer
          example: 9600
        stopbits:
          type: integer
          example: 1
        databits:
          type: integer
          example: 4
    
    OPCUADeviceConfig:
      type: object
      properties:
        url: 
          type: string
          example: opc.tcp://hostname:4841

    Device:
      type: object
      properties:
        ID:
          type: string
          example: 897f0f67
        name:
          type: string
          example: TEST_TCP
        description:
          type: string
          example: This device use TCP protocol
        byteOrder:
          $ref: "#/components/schemas/Order"
        wordOrder:
          $ref: "#/components/schemas/Order"
        scanningCycle:
          type: integer
          minimum: 60
          example: 60
        minRespTime:
          type: integer
          example: 300
        protocol:
          $ref: "#/components/schemas/Protocol"

    DeviceRequestBody:
      type: object
      properties:
        name:
          type: string
          example: TEST_TCP
        description:
          type: string
          example: This device use TCP protocol
        byteOrder:
          $ref: "#/components/schemas/Order"
        wordOrder:
          $ref: "#/components/schemas/Order"
        scanningCycle:
          type: integer
          minimum: 60
          example: 60
        minRespTime:
          type: integer
          example: 300
        protocol:
          $ref: "#/components/schemas/Protocol"
        tagList:
          type: array
          nullable: true
          items:
            oneOf:
              - $ref: "#/components/schemas/ModbusTCPOrRTUTag"
        config:
          oneOf:
            - $ref: "#/components/schemas/ModbusTCPDeviceConfig"
            - $ref: "#/components/schemas/ModbusRTUDeviceConfig"
            - $ref: "#/components/schemas/OPCUADeviceConfig"
    
    CreateDeviceRequestBody:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/DeviceRequestBody"
        repNum:
          type: integer
          example: 1
          minimum: 1

    ModbusTCPOrRTUTag:
      type: object
      properties:
        name:
          type: string
          example: 'test_1'
        address:
          type: integer
          example: 1
        unit:
          type: string
          example: Pa
        dataType:
          $ref: "#/components/schemas/DataType"
        PF:
          type: integer
          example: 1
        size:
          type: integer
          example: 4
    
    OPCUATag:
      type: object
      properties:
        name:
          type: string
          example: 'test_1'
        nodeid:
          type: string
          example: com1
        unit:
          type: string
          example: Pa
        
    Order:
      type: string
      enum:
        - 'BigEndian'
        - 'LittleEndian'
      example: BigEndian
    
    Protocol:
      type: string
      enum:
        - MODBUSTCP
        - MODBUSRTU
        - OPC_UA
    
    DataType:
      type: string
      enum: [int16, uint16, float32, int32, uint32, double, string]